var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DelayedKalmanFilter","category":"page"},{"location":"#DelayedKalmanFilter","page":"Home","title":"DelayedKalmanFilter","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DelayedKalmanFilter]","category":"page"},{"location":"#DelayedKalmanFilter.calculate_current_number_of_states-Tuple{AbstractFloat, DelayedKalmanFilter.TimeConstructor, AbstractFloat}","page":"Home","title":"DelayedKalmanFilter.calculate_current_number_of_states","text":"Calculate the current number of states for a given observation time\n\n\n\n\n\n","category":"method"},{"location":"#DelayedKalmanFilter.calculate_final_covariance_matrix-Tuple{Any, Any, Any}","page":"Home","title":"DelayedKalmanFilter.calculate_final_covariance_matrix","text":"Return the covariance matrix at the current (last predicted) number of states\n\n\n\n\n\n","category":"method"},{"location":"#DelayedKalmanFilter.calculate_log_likelihood_at_parameter_point-Tuple{AbstractArray{<:Real}, Vector{<:AbstractFloat}, Real}","page":"Home","title":"DelayedKalmanFilter.calculate_log_likelihood_at_parameter_point","text":"Calculates the negative log of the likelihood of our data given the paramters, using the Kalman filter. It uses the predictedobservationdistributions from the kalman_filter function. The entries of this array in the second and third columns represent the probability of the future observation of mRNA and Protein respectively, given our current knowledge.\n\nParameters\n\nprotein_at_observations::: Observed protein. The dimension is n x 2, where n is the   number of observation time points. For each data set, the first column is the time,   and the second column is the observed protein copy number at that time.\nmodel_parameters::Vector{<:AbstractFloat}: An array containing the model parameters in the   following order: P₀, h, μₘ, μₚ, αₘ, αₚ, τ.\n\nmeasurementvariance : float.     The variance in our measurement. This is given by Sigmae in Calderazzo et. al. (2018).\n\nReturns\n\nlog_likelihood : float.     The log of the likelihood of the data.\n\n\n\n\n\n","category":"method"},{"location":"#DelayedKalmanFilter.calculate_steady_state_of_ode-Tuple{Any}","page":"Home","title":"DelayedKalmanFilter.calculate_steady_state_of_ode","text":"Calculate the steady state of the Hes5 ODE system, for a specific set of parameters.\n\nArguments\n\nP₀::Float64\nh::Float64\nμₘ::Float64\nμₚ::Float64\nαₘ::Float64\nαₚ::Float64\n\nReturns\n\nsteady_state_solution::Array{Float64,1}: A 2-element array, giving the steady state for the mRNA and protein respectively.\n\n\n\n\n\n","category":"method"},{"location":"#DelayedKalmanFilter.distribution_prediction_at_given_time-Tuple{Any, Any, DelayedKalmanFilter.TimeConstructor, Integer, Matrix{<:AbstractFloat}, AbstractFloat}","page":"Home","title":"DelayedKalmanFilter.distribution_prediction_at_given_time","text":"Calculate the mean and variance of the Normal approximation of the state space for a given time point in the Kalman filtering algorithm and return it as a Normal distribution\n\n\n\n\n\n","category":"method"},{"location":"#DelayedKalmanFilter.get_current_and_past_mean-Tuple{Any, Any, Any}","page":"Home","title":"DelayedKalmanFilter.get_current_and_past_mean","text":"Returns past time, current mean and past protein\n\n\n\n\n\n","category":"method"},{"location":"#DelayedKalmanFilter.hes_ode!-NTuple{4, Any}","page":"Home","title":"DelayedKalmanFilter.hes_ode!","text":"Function which defines the HES5 ode system\n\n\n\n\n\n","category":"method"},{"location":"#DelayedKalmanFilter.hill_function-Tuple{Any, Any, Any}","page":"Home","title":"DelayedKalmanFilter.hill_function","text":"Calculate the Hill function for a given protein molecule number, repression threshold, and hill coefficient.\n\nArguments\n\nprotein::Real\nP₀::Real\nh::Real\n\n\n\n\n\n","category":"method"},{"location":"#DelayedKalmanFilter.initialise_state_space_mean-Tuple{DelayedKalmanFilter.TimeConstructor, Any}","page":"Home","title":"DelayedKalmanFilter.initialise_state_space_mean","text":"Initialse the state space mean for a given set of time states and the ODE system's steady state\n\n\n\n\n\n","category":"method"},{"location":"#DelayedKalmanFilter.initialise_state_space_variance-Tuple{DelayedKalmanFilter.TimeConstructor, Any}","page":"Home","title":"DelayedKalmanFilter.initialise_state_space_variance","text":"Initialse the state space variance for a given set of time states and the ODE system's steady state\n\n\n\n\n\n","category":"method"},{"location":"#DelayedKalmanFilter.kalman_filter-Tuple{Matrix{<:AbstractFloat}, Vector{<:AbstractFloat}, AbstractFloat}","page":"Home","title":"DelayedKalmanFilter.kalman_filter","text":"Perform a delay-adjusted non-linear stochastic Kalman filter based on observation of protein copy numbers. This implements the filter described by Calderazzo et al., Bioinformatics (2018).\n\nArguments\n\nprotein_at_observations::AbstractArray{<:Real}: Observed protein. The dimension is n x 2, where n is the number of observation time points.   The first column is the time, and the second column is the observed protein copy number at   that time. The filter assumes that observations are generated with a fixed, regular time interval.\nmodel_parameters::ModelParameters: A ModelParameters object containing the model parameters in the following order:   repression threshold, hill coefficient, mRNA degradation rate,protein degradation rate, basal transcription rate,   translation rate, time delay.\nmeasurement_variance::Real: The variance in our measurement. This is given by Sigma epsilon in Calderazzo et. al. (2018).\n\nReturns\n\nstate_space_and_distributions::StateAndDistributions: TODO\n\n\n\n\n\n","category":"method"},{"location":"#DelayedKalmanFilter.kalman_filter_state_space_initialisation","page":"Home","title":"DelayedKalmanFilter.kalman_filter_state_space_initialisation","text":"A function for initialisation of the state space mean and variance, and update for the \"negative\" times that are a result of the time delay. Initialises the negative times using the steady state of the deterministic system, and then updates them with kalmanupdatestep.\n\nArguments\n\nprotein_at_observations::AbstractArray{<:Real}: Observed protein. The dimension is n x 2, where n is the number of observation time points.   The first column is the time, and the second column is the observed protein copy number at   that time. The filter assumes that observations are generated with a fixed, regular time interval.\nmodel_parameters::ModelParameters: A ModelParameters object containing the model parameters in the following order:   repression threshold, hill coefficient, mRNA degradation rate,protein degradation rate, basal transcription rate,   translation rate, time delay.\nmeasurement_variance::Real: The variance in our measurement. This is given by Sigma epsilon in Calderazzo et. al. (2018).\n\nReturns\n\nstate_and_distributions::StateAndDistributions: TODO\n\n\n\n\n\n","category":"function"},{"location":"#DelayedKalmanFilter.kalman_prediction_step!-Tuple{Any, Any, DelayedKalmanFilter.TimeConstructor, Vector{<:AbstractFloat}, Vector{<:AbstractFloat}}","page":"Home","title":"DelayedKalmanFilter.kalman_prediction_step!","text":"Perform the Kalman filter prediction about future observation, based on current knowledge i.e. current state space mean and variance. This gives rho{t+delta t-tau:t+delta t} and P{t+delta t-tau:t+delta t}, using the differential equations in supplementary section 4 of Calderazzo et al., Bioinformatics (2018), approximated using a forward Euler scheme.\n\nArguments\n\nstate_space::StateSpace: TODO\nstates::TimeConstructor: TODO\ncurrent_observation::Vector{<:AbstractFloat}: TODO\nmodel_parameters::ModelParameters: A ModelParameters object containing the model parameters in the following order:   repression threshold, hill coefficient, mRNA degradation rate,protein degradation rate, basal transcription rate,   translation rate, time delay.\n\nReturns\n\nstate_space::StateSpace: TODO\n\n\n\n\n\n","category":"method"},{"location":"#DelayedKalmanFilter.kalman_update_step!-Tuple{Any, Any, DelayedKalmanFilter.TimeConstructor, Vector{<:AbstractFloat}, AbstractFloat, AbstractFloat, Any}","page":"Home","title":"DelayedKalmanFilter.kalman_update_step!","text":"Perform the Kalman filter update step on the predicted mean and variance, given a new observation. This implements the equations at the beginning of page 4 in Calderazzo et al., Bioinformatics (2018). This assumes that the observations are collected at fixed time intervals.\n\nArguments\n\nstate_space::StateSpace: TODO\nstates::TimeConstructor: TODO\ncurrent_observation::AbstractArray{<:Real}: TODO\nτ::Real: TODO\nmeasurement_variance::Real: TODO\n\nReturns\n\nstate_space::StateSpace: TODO\n\n\n\n\n\n","category":"method"},{"location":"#DelayedKalmanFilter.predict_state_space_mean!-NTuple{5, Any}","page":"Home","title":"DelayedKalmanFilter.predict_state_space_mean!","text":"Predict state space mean to the next observation time index\n\n\n\n\n\n","category":"method"},{"location":"#DelayedKalmanFilter.predict_state_space_variance!-NTuple{6, Any}","page":"Home","title":"DelayedKalmanFilter.predict_state_space_variance!","text":"Predict state space variance to the next observation time index\n\n\n\n\n\n","category":"method"},{"location":"#DelayedKalmanFilter.time_constructor_function","page":"Home","title":"DelayedKalmanFilter.time_constructor_function","text":"Function which returns an instance of TimeConstructor, which is defines the numbers of states for various uses in the Kalman filter.\n\n\n\n\n\n","category":"function"},{"location":"#DelayedKalmanFilter.update_stacked_state_space_mean-NTuple{6, Any}","page":"Home","title":"DelayedKalmanFilter.update_stacked_state_space_mean","text":"Take the stacked state space mean and return the updated state space mean in the original dimensions\n\n\n\n\n\n","category":"method"}]
}
